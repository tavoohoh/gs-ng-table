/**
 * Table design
 */
export var GTableStyle;
(function (GTableStyle) {
    /**
     * Display the table with all its columns, a header. Actions are optional.
     */
    GTableStyle["TABLE"] = "TABLE";
    /**
     * Disply only the first and second column, no header. Actions are optional.
     */
    GTableStyle["SINGLE"] = "SINGLE";
})(GTableStyle || (GTableStyle = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3MtdGFibGVzLndpZGdldHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcmFwcGlwYXkvZ3MtdGFibGVzLyIsInNvdXJjZXMiOlsibGliL2dzLXRhYmxlcy53aWRnZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBIQTs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLFdBU1g7QUFURCxXQUFZLFdBQVc7SUFDckI7O09BRUc7SUFDSCw4QkFBZSxDQUFBO0lBQ2Y7O09BRUc7SUFDSCxnQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBVFcsV0FBVyxLQUFYLFdBQVcsUUFTdEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHQ291bnRyeUNvZGUgfSBmcm9tICcuL2dzLXRhYmxlcy5lbnVtJztcbmltcG9ydCB7IEdLZXlUeXBlLCBHQ3VzdG9tVGVtcGxhdGUsIEdBZGRpdGlvbmFsRGF0YSwgR1RhYmxlRGF0YVZhbHVlLCBHVGFibGVGb290ZXJBY3Rpb24gfSBmcm9tICcuL2dzLXRhYmxlcy5tb2RlbHMnO1xuXG4vKipcbiAqIEEgcm93IGFjdGlvbiBlbGVtZW50XG4gKiBGb3IgZXhhbXBsZTogJ2VkaXQnLCAnZGVsZXRlJywgZXRjLi4uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR1RhYmxlQWN0aW9uIHtcbiAgdGV4dDogc3RyaW5nO1xuICBoaWRkZW4/OiBib29sZWFuO1xuICBkaXNwbGF5SWY/OiB7XG4gICAgbW9kZWw6IHN0cmluZztcbiAgICBoYXNWYWx1ZTogYW55O1xuICB9O1xuICBpZD86IHN0cmluZztcbiAgcm93Pzoge307XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdHJpZ2dlcmVkIHdoZW4gY2xpY2tpbmcgYW4gYWN0aW9uIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHVGFibGVSb3dBY3Rpb24ge1xuICB0ZXh0OiBzdHJpbmc7XG4gIGFjdGlvbnM6IEFycmF5PEdUYWJsZUFjdGlvbj47XG4gIGhpZGRlbj86IGJvb2xlYW47XG4gIGRpc3BsYXlJZj86IHtcbiAgICBtb2RlbDogc3RyaW5nO1xuICAgIGhhc1ZhbHVlOiBhbnk7XG4gIH07XG59XG5cbi8qKlxuICogSW5wdXQvYnV0dG9uIHN0eWxlc1xuICovXG5pbnRlcmZhY2UgR0lucHV0U3R5bGUge1xuICAvKiBJbnB1dCBwYWRkaW5nICovXG4gIHBhZGRpbmc/OiBzdHJpbmc7XG4gIC8qIElucHV0IHRleHQgY29sb3IgKi9cbiAgY29sb3I/OiBzdHJpbmc7XG4gIC8qIElucHV0IGJhY2tncm91ZCAqL1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuICAvKiBJbnB1dCBib3JkZXIgc2l6ZSAqL1xuICBib3JkZXJTaXplPzogc3RyaW5nO1xuICAvKiBJbnB1dCBib3JkZXIgc3R5bGUgKi9cbiAgYm9yZGVyU3R5bGU/OiBzdHJpbmc7XG4gIC8qIElucHV0IGJvcmRlciBjb2xvciAqL1xuICBib3JkZXJDb2xvcj86IHN0cmluZztcbiAgLyogSW5wdXQgcmFkaW91cyAqL1xuICBib3JkZXJSYWRpdXM/OiBzdHJpbmc7XG4gIC8qIElucHV0IGJvcmRlciB0b3Agd2lkdGgvc2l6ZSAqL1xuICBib3JkZXJUb3A/OiBzdHJpbmc7XG4gIC8qIElucHV0IGJvcmRlciByaWdodCB3aWR0aC9zaXplICovXG4gIGJvcmRlclJpZ2h0Pzogc3RyaW5nO1xuICAvKiBJbnB1dCBib3JkZXIgYm90dG9tIHdpZHRoL3NpemUgKi9cbiAgYm9yZGVyQm90dG9tPzogc3RyaW5nO1xuICAvKiBJbnB1dCBib3JkZXIgbGVmdCB3aWR0aC9zaXplICovXG4gIGJvcmRlckxlZnQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogTGlicmFyeSBzdHlsZXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlbmQgc3R5bGUgcGFyYW1ldGVycyB0byB0aGUgbGlicmFyeVxuICpcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHU3R5bGVzIHtcbiAgY29sb3I/OiB7XG4gICAgLyoqXG4gICAgICogRm9udCBjb2xvclxuICAgICAqIGRlZmF1bHQ6IFwiaW5oZXJpdFwiXG4gICAgICovXG4gICAgZm9udD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFByaW1hcnkgY29sb3IsIHVzZWQgaW4gaW1wb3J0YW50IFVJIGVsZW1lbnRzIGJhY2tncm91bmQgYW5kIGNvbG9yXG4gICAgICogZGVmYXVsdDogXCIjNDU4OGZkXCJcbiAgICAgKi9cbiAgICBwcmltYXJ5Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogU2Vjb25kYXJ5IGNvbG9yLCB1c2VkIGluIHNvbWUgVUkgZWxlbWVudHMgYmFja2dyb3VuZCBhbmQgY29sb3JcbiAgICAgKiBkZWZhdWx0OiBcIiM3YTllOWZcIlxuICAgICAqL1xuICAgIHNlY29uZGFyeT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIE5ldXRyYWwgY29sb3IsIHVzZWQgaW4gc29tZSBVSSBlbGVtZW50cyBiYWNrZ3JvdW5kIGFuZCBjb2xvclxuICAgICAqIGRlZmF1bHQ6IFwiIzRmNjM2N1wiXG4gICAgICovXG4gICAgbmV1dHJhbD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEJvcmRlciBjb2xvclxuICAgICAqIGRlZmF1bHQ6IFwiI2VlZWVlZVwiXG4gICAgICovXG4gICAgYm9yZGVyPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2hpdGUgY29sb3IsIGFsbCB3aGl0ZSBjb2xvcnMgdXNlZCBpbiBVSSBlbGVtZW50c1xuICAgICAqIGRlZmF1bHQ6IFwiI2ZmZmZmZlwiXG4gICAgICovXG4gICAgd2hpdGU/OiBzdHJpbmc7XG4gIH07XG4gIHVpPzoge1xuICAgIC8qKlxuICAgICAqIEZvbnQgc2l6ZSwgYWxsIGZvbnRzIHNpemVcbiAgICAgKiBkZWZhdWx0OiBcIi45cmVtXCJcbiAgICAgKi9cbiAgICBmb250U2l6ZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJbm5lciBwYWRkaW5nXG4gICAgICovXG4gICAgcGFkZGluZz86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJbnB1dCBhbmQgYnV0dG9uIHN0eWxlXG4gICAgICogR28gdG8gYEdJbnB1dFN0eWxlYCBmb3IgZGV0YWlsXG4gICAgICovXG4gICAgcHJpbWFyeUJ1dHRvbj86IEdJbnB1dFN0eWxlO1xuICB9O1xufVxuXG4vKipcbiAqIFRhYmxlIGRlc2lnblxuICovXG5leHBvcnQgZW51bSBHVGFibGVTdHlsZSB7XG4gIC8qKlxuICAgKiBEaXNwbGF5IHRoZSB0YWJsZSB3aXRoIGFsbCBpdHMgY29sdW1ucywgYSBoZWFkZXIuIEFjdGlvbnMgYXJlIG9wdGlvbmFsLlxuICAgKi9cbiAgVEFCTEUgPSAnVEFCTEUnLFxuICAvKipcbiAgICogRGlzcGx5IG9ubHkgdGhlIGZpcnN0IGFuZCBzZWNvbmQgY29sdW1uLCBubyBoZWFkZXIuIEFjdGlvbnMgYXJlIG9wdGlvbmFsLlxuICAgKi9cbiAgU0lOR0xFID0gJ1NJTkdMRSdcbn1cblxuLyoqXG4gKiBUYWJsZSBjb25maWd1cmF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR1RhYmxlIHtcbiAgLyoqXG4gICAqIFRoZSB0YWJsZSBkYXRhIGFzIGFuIGFycmF5IG9mIG9iamVjdHNcbiAgICovXG4gIGRhdGE/OiBBcnJheTxHVGFibGVEYXRhVmFsdWU+O1xuICAvKipcbiAgICogVGFibGUgaGVhZGVyIHZhbHVlc1xuICAgKlxuICAgKiBPcHRpb25hbC4gSWYgbm90IGRlZmluZWQgdGhlIGhlYWRlciB3aWxsIHVzZSBgR1RhYmxlLmRhdGFgIGtleSBuYW1lc1xuICAgKi9cbiAgaGVhZGVyPzogQXJyYXk8c3RyaW5nPjtcbiAgLyoqXG4gICAqIEtleSBuYW1lcyBvZiB0aGUgZGF0YSB2YWx1ZXNcbiAgICpcbiAgICogT3B0aW9uYWwuIElmIG5vdCBkZWZpbmVkIHRoZSB0YWJsZSB3aWxsIGl0ZXJhdGUgb3ZlciB0aGUga2V5cyBvZiBpdHMgZGF0YS5cbiAgICovXG4gIGtleU5hbWVzPzogQXJyYXk8c3RyaW5nPjtcbiAgLyoqXG4gICAqIEtleSB0eXBlIG9mIHRoZSBkYXRhIHZhbHVlc1xuICAgKi9cbiAga2V5VHlwZXM/OiBBcnJheTxHS2V5VHlwZT47XG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIHRhYmxlIGRlc2lnbiBvciBhZGQgZnVuY3Rpb25hbGl0aWVzXG4gICAqL1xuICBvcHRpb25zPzoge1xuICAgIC8qKlxuICAgICAqIFNldCBkZWZhdWx0IGNvdW50cnkgdXNpbmcgYEdGaWVsZENvdW50cnlDb2RlYCBlbnVtIGZvcm0gZ3MtZmllbGRcbiAgICAgKi9cbiAgICBjb3VudHJ5PzogR0NvdW50cnlDb2RlO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdGFibGUgZGVzaWduXG4gICAgICpcbiAgICAgKiBCeSBEZWZhdWx0OiBgR1RhYmxlU3R5bGUuVEFCTEVgXG4gICAgICovXG4gICAgc3R5bGU/OiBHVGFibGVTdHlsZTtcbiAgICAvKipcbiAgICAgKiBBIGRyb3Bkb3duIGJ1dHRvbiB3aXRoIGFjdGlvbnMgdG8gdHJpZ2dlciBldmVudHNcbiAgICAgKi9cbiAgICByb3dBY3Rpb25zPzogR1RhYmxlUm93QWN0aW9uO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYWdlIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICBjdXJyZW50UGFnZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgb2YgYXZhaWxhYmxlIHBhZ2VzXG4gICAgICovXG4gICAgdG90YWxPZlBhZ2VzPzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIHNldCB0ZXh0IHdoZW4gdGFibGUgaGFzIG5vIGRhdGEsIGZvciBkZWZhdWx0IGl0J3Mgc3BhbmlzaFxuICAgICAqL1xuICAgIG5vQ29udGVudFRleHQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSB3aWxsIGJlIHBvc3NpYmxlIHRvIHNlbGVjdCByb3dzIHVzaW5nIGNoZWNrYm94ZXNcbiAgICAgKi9cbiAgICBzZWxlY3RhYmxlPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgY3VzdG9tIGFjdGlvbnNcbiAgICAgKi9cbiAgICB0YWJsZUFjdGlvbnM/OiBBcnJheTxHVGFibGVGb290ZXJBY3Rpb24+O1xuICAgIC8qKlxuICAgICAqIEFkZHMgYW4gZXhwYW5kYWJsZSBjb250YWluZXIgZm9yIGFkZGl0aW9uYWwgZGF0YVxuICAgICAqIE1ha2Ugc3VyZSB0byBpbmNsdWRlIGFuIG9iamVjdCB3aXRoIHRoZSBhZGRpdGlvbmFsIGRhdGEgaW50byB5b3VyIGRhdGEgYXJyYXksIGl0IG1heSBsb29rIGFzIGZvbGxvd1xuICAgICAqXG4gICAgICogZGF0YTogW1xuICAgICAqICAgey4uLn1cbiAgICAgKiAgIHtcbiAgICAgKiAgICAgWy4uLl1cbiAgICAgKiAgICAgW1xuICAgICAqICAgICAgIC4uLlxuICAgICAqICAgICAgICBhZGRpdGlvbmFsRGF0YTogW1xuICAgICAqICAgICAgICAgIHtcbiAgICAgKiAgICAgICAgICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgICogICAgICAgICAgICB2YWx1ZTogc3RyaW5nXG4gICAgICogICAgICAgICAgfVxuICAgICAqICAgICAgICBdXG4gICAgICogICAgICAgLi4uXG4gICAgICogICAgIF1cbiAgICAgKiAgICAgWy4uLl1cbiAgICAgKiAgIH1cbiAgICAgKiAgIHsuLi59XG4gICAgICogXVxuICAgICAqL1xuICAgIGhhc0FkZGl0aW9uYWxEYXRhPzogYm9vbGVhbjtcbiAgfTtcbn1cbiJdfQ==